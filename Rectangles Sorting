#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int length;
    int width;
} Rectangle;

double calculate_area(const Rectangle*);
double calculate_diagonal(const Rectangle*);
int compare_rectangles(const void*, const void*);

int main() {
    int n;
    scanf("%d", &n);

    Rectangle *rectangles = (Rectangle *)malloc(n * sizeof(Rectangle));
    if (rectangles == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }

    for (int i = 0; i < n; i++) {
        scanf("%d %d", &rectangles[i].length, &rectangles[i].width);
    }

    qsort(rectangles, n, sizeof(Rectangle), compare_rectangles);
    
    for (int i = 0; i < n; i++) {
        int length = rectangles[i].length;
        int width = rectangles[i].width;
        int area = length * width;
        double diagonal = calculate_diagonal(&rectangles[i]);
        printf("%d:(%d,%d) area= %d diagonal= %.3lf\n", i + 1, length, width, area, diagonal);
    }

    free(rectangles);

    return 0;
}

double calculate_area(const Rectangle *rect) {
    return rect->length * rect->width;
}

double calculate_diagonal(const Rectangle *rect) {
    return sqrt(rect->length * rect->length + rect->width * rect->width);
}

int compare_rectangles(const void *a, const void *b) {
    Rectangle *rect1 = (Rectangle *)a;
    Rectangle *rect2 = (Rectangle *)b;

    double area1 = calculate_area(rect1);
    double area2 = calculate_area(rect2);

    if (area1 < area2) {
        return -1;
    } else if (area1 > area2) {
        return 1;
    } else {
        double diag1 = calculate_diagonal(rect1);
        double diag2 = calculate_diagonal(rect2);

        if (diag1 > diag2) {
            return -1;
        } else if (diag1 < diag2) {
            return 1;
        } else {
            return 0;
        }
    }
}
